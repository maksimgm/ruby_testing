describe "Iterators" do
  # $arr = [2,1,3,4,5]

  # let(:arr){[2,1,3,4,5]}

  before(:all) do
    @arr = [2,1,3,4,5]
    # uses the same id everytime this variable is instanciated
  end

  # before(:each) do
  #   @arr = [2,1,3,4,5]
  # makes a new id everytime this variable is instanciated
  # end
  # select / FILTER!
  describe "#select" do
    it "returns an array where the condition is true" do
      expect(@arr.select{|x| x.even?}).to eq([2,4])
    end
  end

  # reject
  describe "#reject" do
    it "returns an array of values where the condition is false" do
      expect(@arr.reject{|x| x.even?}).to eq([1,3,5])
    end
  end

  # collect / map
  describe "#collect" do
    it "returns a new array with the results of the block" do
      expect(@arr.collect{|x| x*2}).to eq([4,2,6,8,10])
    end
  end

  # detect / find
  describe "#detect" do
    it "returns nil if not found" do
      expect(@arr.detect{|x| x * 2 == 40}).to eq(nil)
    end
    it "returns the first true result if found" do
      expect(@arr.detect{|x| x * 3 == 6}).to eq(2)
    end
  end

  # inject / reduce
  describe "#inject" do
    it "will apply a block to each value and return a single value based off the accumulator" do
      expect(@arr.inject{|sum,x| sum += x}).to eq(15)
    end
  end

  # partition
  describe "#partition" do
    it "returns an array with two subarrays with truthy and falsey values" do
      expect(@arr.partition{|x| x.even?}). to eq([[2,4],[1,3,5]])
    end
  end

  # sort
  describe "#sort" do
    it "sorts some data" do
      expect(@arr.sort{|x,y| x <=> y}).to eq([1,2,3,4,5])
    end
  end

  # one?
  describe "#one" do
    it "returns true if only one item in the array passes a condition" do
      expect(@arr.one?{|x| x == 2}).to eq(true)
    end
  end

  # none?
  describe "#none" do
    it "returns true if none of items in the array pass a condition" do
      expect(@arr.none?{|x| x == 7}).to eq(true)
    end
  end
end